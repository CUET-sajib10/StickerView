package com.yovenny.stickview.wedget;import android.content.Context;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.util.TypedValue;import android.view.LayoutInflater;import android.view.View;import android.widget.HorizontalScrollView;import android.widget.RadioButton;import android.widget.RadioGroup;import com.yovenny.stickview.R;import com.yovenny.stickview.util.Convert;public class TabBarView extends HorizontalScrollView implements ViewPager.OnPageChangeListener {    private RadioGroup mRadioGroup;    //当前在第几屏    private int mCurrIdx;    private int mTabCount;    private int mRadioIdSeed = 2001;    private int ITEM_DEFAULT_WIDTH = Convert.dip2px(getContext(), 120);    private int mIndicatorMargin;    private int mIndicatorWidth;    private int mItemWidth;    private View mIndicator;    private View mDarkLine;    private int mCurrLeft;    private int mScnWidth;    private boolean mLimitInScreen;    private int mSelectPos;    public TabBarView(Context context, AttributeSet attrs) {        super(context, attrs);        initView();    }    public TabBarView(Context context) {        super(context);        initView();    }    // 以屏幕宽度作为容器的最大宽度，既不可横向滑动    public void limitInScreen(boolean val) {        mLimitInScreen = val;        updateLayout();    }    private void initView() {        setHorizontalScrollBarEnabled(false);        setVerticalScrollBarEnabled(false);        LayoutInflater.from(getContext()).inflate(R.layout.widget_tabbar, this, true);        mRadioGroup = (RadioGroup) findViewById(R.id.tabs_group);        mIndicator = findViewById(R.id.tab_indicator);        mDarkLine=findViewById(R.id.dark_line);    }    public void setTabHeight(int resId) {        View view = findViewById(R.id.tab_bar_relative);        //include xml（将在父控件包一层FrameLayout）        LayoutParams params = (LayoutParams) view.getLayoutParams();        params.height = (int) getContext().getResources().getDimension(resId);        view.setLayoutParams(params);        view.invalidate();    }    public void setTabBackground(int resId) {        findViewById(R.id.tab_bar_relative).setBackgroundResource(resId);    }    public void setIndicatorColor(int resId) {        findViewById(R.id.tab_indicator).setBackgroundResource(resId);    }    public void setRadioTextColor(int resId) {        for (int i = 0; i < mRadioGroup.getChildCount(); i++) {            ((RadioButton) mRadioGroup.getChildAt(i)).setTextColor(getResources().getColorStateList(resId));        }    }    public void setTextStyle(int resId) {        for (int i = 0; i < mRadioGroup.getChildCount(); i++) {            ((RadioButton) mRadioGroup.getChildAt(i)).setTextAppearance(getContext(), resId);        }    }    public void setTabIndicatorMargin(int val) {        mIndicatorMargin = val;        updateLayout();    }    public void updateTabIndicatorMargin(int val) {        mIndicatorMargin = val;        MarginLayoutParams lp = (MarginLayoutParams) mIndicator.getLayoutParams();        mIndicatorWidth = mItemWidth - 2 * mIndicatorMargin;        lp.width = mIndicatorWidth;        //lp.leftMargin = mItemWidth * pos + mIndicatorMargin ;        //mIndicator.post(mUpdateIndicatorRunnable);    }    public int getItemWidth() {        return mItemWidth;    }    /**     * 显示对应位置的Tab的红点提醒     *     * @param pos     */    public void showTabNotice(int pos) {        ((ScaleRadioButton) mRadioGroup.getChildAt(pos)).setRedDotStyle(ScaleRadioButton.CORNER_DOT_STYLE);    }    public void add(String subTitle) {        mTabCount++;        increaseRadioButton(mTabCount - 1, subTitle);        updateLayout();    }    public void addOrigin(RadioButton radioButton){        mTabCount++;        mRadioGroup.addView(radioButton,new RadioGroup.LayoutParams(RadioGroup.LayoutParams.WRAP_CONTENT, RadioGroup.LayoutParams.MATCH_PARENT));    }    private void updateRadioButtonWidth() {        int childCount = mRadioGroup.getChildCount();        for (int i = 0; i < childCount; i++) {            View child = mRadioGroup.getChildAt(i);            child.getLayoutParams().width = mItemWidth;            child.invalidate();        }    }    public void updateRadioButtonSelector(int resId) {        int childCount = mRadioGroup.getChildCount();        for (int i = 0; i < childCount; i++) {           mRadioGroup.getChildAt(i).setBackgroundResource(resId);        }    }    private void updateLayout() {        if (mTabCount > 0) {            mItemWidth = ITEM_DEFAULT_WIDTH;            if (mLimitInScreen || mItemWidth * mTabCount <= mScnWidth) {                mItemWidth = mScnWidth / mTabCount;            }            updateRadioButtonWidth();            initCheckedLine();            //mIndicator.post(mUpdateIndicatorRunnable);        }    }    public void setItemWidth(int width) {        ITEM_DEFAULT_WIDTH = width;    }    public void setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener checkedListener) {        mRadioGroup.setOnCheckedChangeListener(checkedListener);    }    public void setScreenWidth(int scnWidth) {        mScnWidth = scnWidth;    }    private void increaseRadioButton(int orderId, String text) {        if (orderId >= mTabCount) {            return;        }        ScaleRadioButton newRadioBtn = new ScaleRadioButton(getContext());        /**         * 下面三行，保证单选按钮不会出现左圆点且文字内容可以居中显示         *(上面这个注释是相对RadioButton，现改为ScaleRadioButton,且下面几个注释不能打开，否则显示不出来)。         */        //newRadioBtn.setButtonDrawable(android.R.color.transparent);        //newRadioBtn.setGravity(Gravity.CENTER);        newRadioBtn.setTextColor(getResources().getColorStateList(R.color.tab_title_text_colors));        // newRadioBtn.setBackgroundResource(R.drawable.tab_item_bg_selector);        // newRadioBtn.setPadding(5, 0, 5, 0);    // if setpadding before setbackground, it does not work        newRadioBtn.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.tab_title_text_size));        newRadioBtn.setSingleLine();        newRadioBtn.setMaxEms(8);        newRadioBtn.setText(text);        newRadioBtn.setId(mRadioIdSeed++);        if (orderId == 0) {            newRadioBtn.setChecked(true);        }        mRadioGroup.addView(newRadioBtn, new RadioGroup.LayoutParams(mItemWidth, RadioGroup.LayoutParams.MATCH_PARENT));    }    private void initCheckedLine() {        MarginLayoutParams lp = (MarginLayoutParams) mIndicator.getLayoutParams();        mIndicatorWidth = mItemWidth - 2 * mIndicatorMargin;        lp.width = mIndicatorWidth;        lp.leftMargin = mIndicatorMargin;    }    private Runnable mUpdateIndicatorRunnable = new Runnable() {        @Override        public void run() {            mIndicator.requestLayout();        }    };    @Override    public void onPageScrolled(int position, float offset, int offsetPixels) {        MarginLayoutParams lp = (MarginLayoutParams) mIndicator.getLayoutParams();        lp.leftMargin = (mItemWidth * position) + mIndicatorMargin + (int) (offset * (mIndicatorWidth + mIndicatorMargin * 2));        /**         * there's a problem in fragment viewpager         * postInvalidate not work, so post runnable can deal with it         * **/        mIndicator.post(mUpdateIndicatorRunnable);    }    @Override    public void onPageSelected(int pos) {        if (pos >= mTabCount || pos < 0) {            return;        }        mSelectPos = pos;        if (!mLimitInScreen) {            //左中点            int leftCenterX = pos * mItemWidth + mItemWidth / 2 - mCurrLeft;            int center = mScnWidth / 2;            int scollX = leftCenterX - center;            mCurrIdx = pos;            smoothScrollBy(scollX, 0);        }        //调用clearCheck()会多次调用onCheckedChange Listener导致逻辑混淆        ((RadioButton) mRadioGroup.getChildAt(pos)).setChecked(true);    }    @Override    public void onPageScrollStateChanged(int i) {    }    @Override    protected void onScrollChanged(int l, int t, int oldl, int oldt) {        super.onScrollChanged(l, t, oldl, oldt);        mCurrLeft = l;    }    public ScaleRadioButton getScaleRadio(int index) {        return (ScaleRadioButton) mRadioGroup.getChildAt(index);    }    public void hideTabIndicator() {        mIndicator.setVisibility(View.GONE);        mDarkLine.setVisibility(View.GONE);    }    public void setRadioGroupBackgroundColor(int color) {        mRadioGroup.setBackgroundColor(color);    }    public void setCheckAt(int checkAt) {        ((RadioButton)mRadioGroup.getChildAt(checkAt)).setChecked(true);    }    public void setRadioGroupPadding(int left ,int top,int right,int bottom){        mRadioGroup.setPadding(left,top,right,bottom);    }}